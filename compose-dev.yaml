services:
  server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    volumes:
      - ./src:/app
      # - ./nodemon.json:/usr/src/app/nodemon.json
    ports:
      - '9971:9971'

  postgres:
    image: postgres:16
    restart: always
    user: postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: postgres
    volumes:
      - ts-node-data:/var/lib/postgres/data
    ports:
      - '5433:5432'
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    command: ['start-dev']
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KC_HEALTH_ENABLED: 'true'
      KEYCLOAK_ADMIN: ${AUTH_CLIENT_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${AUTH_CLIENT_PASSWORD}
      KC_DB: postgres
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_DB_URL_DATABASE: ${DB_NAME}
      KC_DB_SCHEMA: public
      KC_DB_URL_HOST: ${DB_HOST}
      KC_DB_URL_PORT: ${DB_PORT}
      KC_DB_USERNAME: ${DB_USERNAME}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '8180:8080'
volumes:
  ts-node-data:
